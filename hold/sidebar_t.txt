"use client";

import { useRouter } from "next/navigation";
import { motion } from "framer-motion";
import { Menu, User, Settings, LogOut, WalletCards, BanknoteIcon } from "lucide-react";

// import { logOut } from "@/app/drizzle/auth/nextjs/actions";
// import { useSelector, useDispatch } from "react-redux";

// import { RootState } from "@/app/redux/store";
// import { setRoute } from "@/app/redux/slices/routeSlice";

const Sidebar = ({ isOpen, logOut, active, role, className }: {isOpen: boolean, logOut: () => void, active: string, role: string, className: string}) => {
  const router = useRouter();
  // const routeState = useSelector((state: RootState) => state.route);
  // const dispatch = useDispatch();
   const getIcons = (str: string) => {
    switch(str){
      case 'Dashboard':
        return <Menu className="w-3 h-3 lg:w-6 lg:h-5" />;
      case 'Profile':
        return <User className="w-3 h-3 lg:w-6 lg:h-5" />;
      case 'Payouts':
        return <WalletCards className="w-3 h-3 lg:w-6 lg:h-5" />
      case 'Settings':
        return <Settings className="w-3 h-3 lg:w-6 lg:h-5" />;
      case 'Withdraw':
        return <BanknoteIcon className="w-3 h-3 lg:w-6 lg:h-5" />;
    }
   }

  return (
    // <div className={}>
      <motion.aside 
      initial={{ x: -200 }} 
      animate={{ x: 0 }} 
      transition={{ type: "spring", stiffness: 80 }}
      className={`${className} bg-white flex flex-col h-[100%] px-2 py-5 lg:p-5 shadow-md  ${isOpen ? "w-64" : "w-15 lg:w-20"} transition-all `}
    >
      {isOpen ? (<div className={` w-[100%] h-[100] lg:w-[100%] z-50 lg:h-[10%] mb-6 transform `}>
        <img alt="logo" src="/roving.png" className="z-20" />
        </div>) : <h1 className={`text-xl font-bold mb-6 ${isOpen ? "block" : "block"} text-red-400`}>RH</h1>}
      <nav className="flex-grow">
        <ul>
          {["Dashboard", "Profile", role === 'admin' ? "Payouts" : "Withdraw"].map((item, index) => (
            <motion.li 
              key={index} 
              whileHover={{ scale: 1.05 }} 
              className={`flex items-center justify-center gap-3 py-2 px-2 hover:bg-gray-100 ${active === item.toLowerCase() && 'bg-gray-100' } rounded-md cursor-pointer`}
              // SETUP REDUX TO CONTROL AN CONNECT STATE OF SIDEBAR AND DASHBOARD
              onClick={() => {
                const route = item.toLowerCase();
                router.push(`/?p=${route}`);
                // dispatch(setRoute(route));
              }}
            >
                { getIcons(item) } 
              <span className={`${isOpen ? "block" : "hidden"}`}>{item}</span>
            </motion.li>
          ))}
        </ul>
      </nav>
      <motion.div 
        whileHover={{ scale: 1.1 }} 
        className="p-3 flex items-center gap-3 text-red-500 cursor-pointer"
        onClick={() => logOut()}
      >
        <LogOut className="w-6 h-6" /> <span className={`${isOpen ? "block" : "hidden"}`}>Logout</span>
      </motion.div>
    </motion.aside>
    // </div>
  );
}
  

  export default Sidebar;