"use client"

import { useState, FC, useEffect } from "react";
// import { useSelector } from "react-redux";
import { useSearchParams } from "next/navigation";
import { useSelector, useDispatch } from "react-redux";
import dynamic from "next/dynamic";

import { RootState } from "@/app/redux/store";

// import { RootState } from "@/app/redux/store";
import Sidebar from "@/app/assets/components/sidebar";
import { UserSession } from "@/app/drizzle/auth/core/session";
import TopBar from "@/app/assets/components/topbar";
import Tab from "@/app/assets/containers/dashboard/Tab";

const Modal = dynamic(() => import("@/app/assets/components/modal"), { ssr: false });
const MiniModal = dynamic(() => import("@/app/assets/components/modal/miniModal"), { ssr: false });
// import Modal from "@/app/assets/components/modal";
// import MiniModal from "@/app/assets/components/modal/miniModal"

export interface DashboardProps {
  children?: React.ReactNode;
  user: UserSession;
  logOut: () => void;
}

const Dashboard: FC<DashboardProps> = ( { logOut, user }) => {
  const { open } = useSelector((state: RootState) => state.route.modal);
  const dispatch = useDispatch();
  // const user = await getCurrentUser()
  // const routeState = useSelector((state: RootState) => state.route);
  const search = useSearchParams();
  const path = search.get("p")
  const panel = path && path.toString();
  const [ link, setLink ] = useState(panel ? panel : 'dashboard');
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);

  useEffect(() => {

  }, [open])

  useEffect(() => {
    if (panel) {
      setLink(panel);
      return
    }
    setLink(link)
  }, [panel, link])

  return (
    <div className="flex text-[#333] bg-white">
      <Sidebar className="min-h-[100%] fixed overflow-x-hidden bg-black" active={link} isOpen={isSidebarOpen} logOut={logOut} role={user.role} />
      <div className={`transition-all ${isSidebarOpen ? "ml-48 lg:ml-64" : "ml-15 lg:ml-20"} w-full bg-gray-50 min-h-screen p-6 pt-20 overflow-y-scroll`}>
      <TopBar toggleSidebar={() => setIsSidebarOpen(!isSidebarOpen)} isSidebarOpen={isSidebarOpen} />
        <div className={isSidebarOpen ? "ml-[-20]" : "ml-10"}>{user && <Tab data={{ link, user }} />}</div>
      </div>

      <Modal setOpen={() => dispatch({ type: "route/setOpen", payload: !open })} />
      <MiniModal setOpen={(arg) => dispatch({ type: "route/setMiniOpen", payload: arg !== undefined ? arg : !open })} />
    </div>
  );
};

export default Dashboard;